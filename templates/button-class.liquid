{%
assign class_name = currentClass.friendlyName | camel_case | capitalize %}{%
assign base_class = 'object' %}
import fcntl
import array

class {{ class_name }}({{ base_class }}):

    """{% for line in currentClass.description %}
    {{ line }}{% endfor %}

    This implementation depends on the availability of the EVIOCGKEY ioctl
    to be able to read the button state buffer. See Linux kernel source
    in /include/uapi/linux/input.h for details.
    """

    KEY_MAX = 0x2FF
    KEY_BUF_LEN = int((KEY_MAX + 7) / 8)
    EVIOCGKEY = (2 << (14 + 8 + 8) | KEY_BUF_LEN << (8 + 8) | ord('E') << 8 | 0x18)

    def __init__(self):
        self.buffer_cache = {}
        self.filehandle_cache = {}
        for b in self._buttons:
            self._button_file( self._buttons[b]['name'] )
            self._button_buffer( self._buttons[b]['name'] )

    def _button_file(self, name):
        if name not in self.filehandle_cache:
            f = open( name, 'r' )
            self.filehandle_cache[name] = f
        else:
            f = self.filehandle_cache[name]
        return f

    def _button_buffer(self, name):
        if name not in self.buffer_cache:
            self.buffer_cache[name] = array.array( 'B', [0] * self.KEY_BUF_LEN )
        return self.buffer_cache[name]

    def read_buttons(self):
        for b in self.buffer_cache:
            fcntl.ioctl(self.filehandle_cache[b], self.EVIOCGKEY, self.buffer_cache[b])

    def check_buttons(self):
        pressed = []
        self.read_buttons()
        for k,v in self._buttons.items():
            buf = self.buffer_cache[v['name']]
            bit = v['value']
            if not bool(buf[int(bit / 8)] & 1 << bit % 8):
                pressed += [k]
        return pressed

    @property
    def any(self):
        return bool(len(self.check_buttons()) != 0)

    @property
    def which(self):
        return self.check_buttons()

    def these(self,buttons={}):
        if len(buttons) == 0:
            return False
        s = self.check_buttons()
        if len(s) == 0:
            return False
        for b in buttons:
            if b not in s:
                return False
        return True
