{%
assign class_name = currentClass.friendlyName | camel_case | capitalize %}{%
assign base_class = 'object' %}
import fcntl
import array

class {{ class_name }}({{ base_class }}):

    """{% for line in currentClass.description %}
    {{ line }}{% endfor %}

    This implementation depends on the availability of the EVIOCGKEY ioctl
    to be able to read the button state buffer. See Linux kernel source
    in /include/uapi/linux/input.h for details.
    """

    KEY_MAX = 0x2FF
    KEY_BUF_LEN = int((KEY_MAX + 7) / 8)
    EVIOCGKEY = (2 << (14 + 8 + 8) | KEY_BUF_LEN << (8 + 8) | ord('E') << 8 | 0x18)

    def __init__(self):
        self._buf = array.array( 'B', [0] * self.KEY_BUF_LEN )
        self.filehandle_cache = {}

    def _button_file(self, name):
        if name not in self.filehandle_cache:
            f = open( name, 'r' )
            self.filehandle_cache[name] = f
        else:
            f = self.filehandle_cache[name]
        return f

    def read_button(self, name, button):
        ret = fcntl.ioctl(self._button_file(name), self.EVIOCGKEY, self._buf)
        if (ret < 0):
            return None
	else:
            return not bool(self._buf[int(button / 8)] & 1 << button % 8)
